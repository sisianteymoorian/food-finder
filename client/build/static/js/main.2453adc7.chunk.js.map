{"version":3,"sources":["SVG/logo_w_text.svg","SVG/repeated_logo_background.svg","register&login/JSX/Register.js","SVG/repeated_logo_w_text_background.svg","register&login/JSX/Login.js","SVG/logo.svg","SVG/you_are_here.svg","main/JSX/Find.js","SVG/trash.svg","main/JSX/SavedRow.js","main/JSX/Saved.js","NotFound.js","main/JSX/Nav.js","App.js","index.js"],"names":["Register","useState","username","setUsername","password","setPassword","buttonDisabled","setButtonDisabled","error","setError","history","useHistory","useEffect","className","src","logo_w_text","alt","height","id","type","onChange","change","validator","trim","target","value","toLowerCase","to","disabled","onClick","axios","get","then","catch","err","response","status","post","push","style","visibility","backgroundImage","background","Login","res","data","replace","savedArray","savedRestaurantsList","TOKEN","process","REACT_APP_MAPBOX_TOKEN","restaurantsList","Find","props","setSavedArray","latitude","longitude","width","zoom","map","setMap","point","setPoint","locations","setLocations","selectedLocation","setSelectedLocation","Promise","navigator","geolocation","getCurrentPosition","position","coords","fetch","json","features","location","name","text","address","place_name","substring","indexOf","center","mapboxApiAccessToken","mapStyle","onViewportChange","view","backgroundColor","e","lngLat","location_marker","border","cursor","marker_icon","closeOnClick","onClose","some","element","put","SavedRow","restaurantName","restaurantAddress","restaurantDelete","logo","trash","Saved","restaurant","idx","closest","remove","deleteObjectText","getElementsByClassName","innerText","index","findIndex","splice","NotFound","Nav","useLocation","href","exact","path","render","undefined","state","array","App","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2453adc7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo_w_text.31d6cfe0.svg\";","export default __webpack_public_path__ + \"static/media/repeated_logo_background.31d6cfe0.svg\";","import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport validator from 'validator'; // Validator is used below to trim (remove whitespace from) entered username/password values\nimport '../CSS/RegisterLoginCSS.css';\nimport logo_w_text from '../../SVG/logo_w_text.svg';\nimport background from '../../SVG/repeated_logo_background.svg';\n\nexport default function Register() {\n    // DEFINE STATE\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [buttonDisabled, setButtonDisabled] = useState(true);\n    const [error, setError] = useState(\"hidden\");\n    const history = useHistory();\n\n    // UPDATE BUTTON TO BE ENABLED/DISABLED BASED ON USER INPUT\n    useEffect(() => {\n        ((username === \"\") || (password === \"\"))  ?  setButtonDisabled(true)  :  setButtonDisabled(false);\n    }, [username, password]); // Run every time the username or password are updated\n\n    // RENDER THE REGISTER WINDOW\n    return (\n        <>\n            <div className=\"header\">\n                <img src={logo_w_text} alt=\"FoodFind\" height=\"80\" />\n            </div>\n            <div id=\"usernameRow\">\n                <span className=\"textBox\">Username</span>\n                <input type=\"text\" className=\"inputBox\" onChange={change => setUsername(validator.trim(change.target.value.toLowerCase()))}></input>\n            </div>\n            <div id=\"passwordRow\">\n                <span className=\"textBox\">Password</span>\n                <input type=\"text\" className=\"inputBox\" onChange={change => setPassword(validator.trim(change.target.value))}></input>\n            </div>\n            <div id=\"bottomRow\">\n                <Link to=\"/login\" className=\"loginText\"><span>Already have an account?</span></Link>\n                <button className=\"registerButton\" disabled={buttonDisabled} onClick={() => {\n                    // CREATE CLIENT DOCUMENT IN MONGODB\n                    if ((username !== \"\") && (password !== \"\")) {\n                        axios.get(`/userHandler/`+username)\n                            .then(setError(\"visible\"))\n                            .catch(err => {\n                                if (err.response.status === 404) {\n                                    axios.post(\"/userHandler/\", { username: username, password: password })\n                                        .then(history.push(\"/login\")); // Redirect to the login page\n                                }\n                            });\n                    }\n                }}>Register</button>\n                <p id=\"error\" style={{ visibility: error }}>Username already exists. Try again.</p>\n            </div>\n            <div className=\"decoration\" style={{ backgroundImage: `url(${background})` }}></div>\n        </>\n    );\n}","export default __webpack_public_path__ + \"static/media/repeated_logo_w_text_background.31d6cfe0.svg\";","import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport validator from 'validator'; // Validator is used below to trim (remove whitespace from) entered username/password values\nimport '../CSS/RegisterLoginCSS.css';\nimport logo_w_text from '../../SVG/logo_w_text.svg';\nimport background from '../../SVG/repeated_logo_w_text_background.svg'\n\nexport default function Login() {\n    // DEFINE STATE\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [buttonDisabled, setButtonDisabled] = useState(true);\n    const [error, setError] = useState(\"hidden\");\n    const history = useHistory();\n\n    // UPDATE BUTTON TO BE ENABLED/DISABLED BASED ON USER INPUT\n    useEffect(() => {\n        ((username === \"\") || (password === \"\"))  ?  setButtonDisabled(true)  :  setButtonDisabled(false);\n    }, [username, password]); // Run every time the username or password are updated\n\n    // RENDER THE REGISTER WINDOW\n    return (\n        <>\n            <div className=\"header\">\n                <img src={logo_w_text} alt=\"FoodFind\" height=\"80\" />\n            </div>\n            <div id=\"usernameRow\">\n                <span className=\"textBox\">Username</span>\n                <input type=\"text\" className=\"inputBox\" onChange={change => setUsername(validator.trim(change.target.value.toLowerCase()))}></input>\n            </div>\n            <div id=\"passwordRow\">\n                <span className=\"textBox\">Password</span>\n                <input type=\"text\" className=\"inputBox\" onChange={change => setPassword(validator.trim(change.target.value))}></input>\n            </div>\n            <div id=\"bottomRow\">\n                <Link to=\"/\" className=\"loginText\"><span>Don't have an account?</span></Link>\n                <button className=\"registerButton\" disabled={buttonDisabled} onClick={() => {\n                    // ACCESS CLIENT DOCUMENT IN MONGODB\n                    if ((username !== \"\") && (password !== \"\")) {\n                        axios.get(`/userHandler/`+username)\n                            .then(res => {\n                                (res.data[0].password === password)  ?  history.replace(\"/nav\", { username: username, savedArray: res.data[0].savedRestaurantsList })  :  setError(\"visible\");\n                                // If the username/password combo match an account in the MongoDB database, redirect to the nav component, replacing the state with the user's\n                                // username/saved restaurants. If the username/password combo is not correct, change the error's state so that it will show\n                            })\n                            .catch(err => {\n                                if (err.response.status === 404) setError(\"visible\");\n                            });\n                    }\n                }}>Login</button>\n                <p id=\"error\" style={{ visibility: error }}>Invalid username/password. Try again.</p>\n            </div>\n            <div className=\"decoration\" style={{ backgroundImage: `url(${background})` }}></div>\n        </>\n    );\n}","export default __webpack_public_path__ + \"static/media/logo.31d6cfe0.svg\";","export default __webpack_public_path__ + \"static/media/you_are_here.31d6cfe0.svg\";","import React, { useState, useEffect } from 'react';\nimport ReactMapGL, { Marker, Popup } from 'react-map-gl';\nimport axios from 'axios';\nimport marker_icon from '../../SVG/logo.svg';\nimport location_marker from '../../SVG/you_are_here.svg';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport '../CSS/FindCSS.css';\n\nconst MAPPING_URL = `https://api.mapbox.com/geocoding/v5/mapbox.places/food.json?limit=10&proximity=`;\nconst TOKEN = process.env.REACT_APP_MAPBOX_TOKEN;\nlet restaurantsList = []; // Values are pushed to this array later, when the user saves locations to their account\n\nexport default function Find(props) {\n    // ACCESSING THE PROPS\n    const { username, setSavedArray } = props;\n\n    // DEFINING THE STATE\n    const [map, setMap] = useState({ // Defines the state for the map\n        latitude: 0,\n        longitude: 0,\n        width: \"100vw\",\n        height: \"100vh\",\n        zoom: 13\n    });\n    const [point, setPoint] = useState({ // Defines the state for the user's location point\n        latitude: 0,\n        longitude: 0\n    });\n    const [locations, setLocations] = useState([]); // Defines the state for the shown restaurants on the map\n    const [selectedLocation, setSelectedLocation] = useState(); // Defines the state for the user's selected restaurant\n\n    // INITIALIZING THE MAP VIEW AND STATE WITH useEffect() HOOK\n    useEffect(() => {\n        axios.get(`/userHandler/`+username)\n            .then(res => restaurantsList = res.data[0].savedRestaurantsList);\n        return new Promise(() => {\n            navigator.geolocation.getCurrentPosition(position => {\n                setMap({ // Set the map state\n                    latitude: position.coords.latitude, // Uses the JavaScript geolocation API to get the latitude\n                    longitude: position.coords.longitude, // Uses the JavaScript geolocation API to get the longitude\n                    width: \"100vw\",\n                    height: \"100vh\",\n                    zoom: 13\n                });\n                setPoint({ // Set the user's location state\n                    latitude: position.coords.latitude, // Uses the JavaScript geolocation API to get the latitude\n                    longitude: position.coords.longitude // Uses the JavaScript geolocation API to get the longitude\n                });\n            });\n        }) // eslint-disable-next-line\n    }, []); // Called when the component initially loads\n\n    // SETTING THE FOUND API LOCATIONS\n    useEffect(() => {\n        fetch(`${MAPPING_URL}${point.longitude},${point.latitude}&access_token=${TOKEN}`)\n            .then(res => res.json())\n            .then(data => {\n                setLocations([...data.features].map(location => { // Uses the Spread (...) operator to destructure the \"features\" array returned by the Mapbox API + Set the locations' state\n                    return { // Map over the \"features\" array, returning a new array of Objects with name, address, longitude and latitude\n                        name: location.text,\n                        address: location.place_name.substring(location.place_name.indexOf(\", \") + 2),\n                        longitude: location.center[0],\n                        latitude: location.center[1]\n                    };\n                }));\n            });\n    }, [point]); // Locations are updated every time the current point changes\n\n    // RENDER THE MAP WINDOW\n    return (\n        <ReactMapGL\n            {...map} // Uses the Spread (...) operator to destructure the values in the map object\n            mapboxApiAccessToken={TOKEN}\n            mapStyle=\"mapbox://styles/tristanparry/ckqud1uyq06n317o4or3ytvld\" // Custom map style I created\n            onViewportChange={view => setMap(view)} // Handles the map changes through the useState() hook, with the map mutator method\n            style={{ backgroundColor: \"#BFC9D2\" }} // Manually sets the background colour of the ReactMapGL HTML element\n            onClick={e => { // When the user clicks on the map...\n                setPoint({ // Set the state of the user's map location\n                    longitude: e.lngLat[0],\n                    latitude: e.lngLat[1]\n                });\n                setSelectedLocation(null); // Set the state of the selected location to null (if a user had a selected location, they do not anymore)\n            }}\n        >\n            <Marker // Marker for the user's map location\n                latitude={point.latitude}\n                longitude={point.longitude}\n            ><img src={location_marker} alt=\"\" height={map.zoom * 4} /></Marker>\n\n            {locations.map(location => { // Map over the \"locations\" array, returning a new array of Markers with the location attributes\n                return <Marker className=\"marker\" key={location.name + location.address} latitude={location.latitude} longitude={location.longitude} onClick={e => setSelectedLocation(location)}>\n                    <button style={{ border: \"none\", background: \"none\", cursor: \"pointer\" }}><img src={marker_icon} alt=\"\" height={map.zoom * 3} /></button>\n                </Marker>\n            })}\n\n            {selectedLocation ? // If a selected location exists, render its Popup (see below), otherwise, render no Popup (null)\n                (<Popup latitude={selectedLocation.latitude} longitude={selectedLocation.longitude} closeOnClick={false} onClose={() => setSelectedLocation(null)} className=\"popup\">\n                    <div>\n                        <span className=\"popupName\">{selectedLocation.name}</span>\n                        <span className=\"popupAddress\">{selectedLocation.address}</span>\n                        <button className=\"saveButton\" onClick={() => {\n                            axios.get(`/userHandler/`+username)\n                                .then(res => {\n                                    const contained = res.data[0].savedRestaurantsList.some(element => // Checks if a restaurant in the user's saved list is being duplicated\n                                        (element.name === selectedLocation.name) && (element.address === selectedLocation.address));\n                                    if (!contained) { // If the selected location is not already in the user's list, it can be saved\n                                        restaurantsList.push(selectedLocation);\n                                        axios.put(`/userHandler/`+username, { savedRestaurantsList: restaurantsList });\n                                        setSavedArray(restaurantsList); // Accesses the method in the setSavedArray prop, passing it the restaurantsList as a parameter\n                                    }\n                                });\n                        }}>Save</button>\n                    </div>\n                </Popup>) : null}\n        </ReactMapGL>\n    );\n}","export default __webpack_public_path__ + \"static/media/trash.31d6cfe0.svg\";","import React from 'react';\nimport logo from '../../SVG/logo.svg';\nimport trash from '../../SVG/trash.svg';\nimport '../CSS/SavedCSS.css';\n\nexport default function SavedRow(props) {\n    // ACCESSING THE PROPS\n    const { restaurantName, restaurantAddress, restaurantDelete } = props;\n\n    // RENDER THE ROW\n    return (\n        <div className=\"row\" onClick={restaurantDelete} style={{ cursor: \"pointer\" }}>\n            <img src={logo} alt=\"\" height=\"60px\" id=\"logo\" />\n            <div className=\"info\">\n                <span id=\"name\">{restaurantName}</span>\n                <span id=\"address\">{restaurantAddress}</span>\n            </div>\n            <button style={{ border: \"none\", background: \"none\" }}><img src={trash} alt=\"Delete\" height=\"30px\" /></button>\n        </div>\n    );\n}","import React from 'react';\nimport SavedRow from './SavedRow.js';\nimport axios from 'axios';\n\nexport default function Saved(props) {\n    // ACCESSING THE PROPS\n    const { username, savedArray } = props;\n\n    // RENDER THE SAVED WINDOW\n    return (\n        <>\n            <div className=\"savedRestaurants\">\n                {savedArray.map((restaurant, idx) => <SavedRow key={idx} restaurantName={restaurant.name} restaurantAddress={restaurant.address}\n                // Map over the savedArray of restaurants, returning a SavedRow component for each one\n                restaurantDelete={e => {\n                    e.target.closest(\".row\").remove(); // Remove the SavedRow from the view\n                    axios.get(`/userHandler/`+username)\n                        .then(res => {\n                            const deleteObjectText = (e.target.closest(\".row\").getElementsByClassName(\"info\"))[0].innerText; // Get the text from the object to delete\n                            const index = savedArray.findIndex(element => (element.name + element.address) === deleteObjectText); // Find the index of the array object with the retrieved text\n                            savedArray.splice(index, 1); // Delete the restaurant at the found index\n                            axios.put(`/userHandler/`+username, { savedRestaurantsList: savedArray }); // Update the database array of saved restaurants\n                        });\n                }}/>)}\n            </div>\n            <div id=\"hearts\"></div>\n        </>\n    );\n}","import React from 'react';\nimport logo from './SVG/logo.svg';\nimport './App.css';\n\nexport default function NotFound() {\n    return (\n        <div className=\"wrapper\">\n            <div id=\"notFound\">\n                <div id=\"fourOFour\">\n                    <span>4</span>\n                    <span><img src={logo} alt=\"\" height=\"180px\" id=\"logo\" /></span>\n                    <span>4</span>\n                </div>\n                <div id=\"errorMsg\">FoodNotFound.</div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport { Route, Link, Switch, BrowserRouter, useLocation } from 'react-router-dom';\nimport Find from './Find.js';\nimport Saved from './Saved.js';\nimport NotFound from '../../NotFound.js';\nimport logo_w_text from '../../SVG/logo_w_text.svg';\nimport '../CSS/NavCSS.css';\n\nexport default function Nav() {\n    const location = useLocation(); // Gets the location the username was pushed from (the login component)\n\n    // RENDER COMPONENT\n    return (\n        <BrowserRouter>\n            <div className=\"logoTop\">\n                <Link to=\"/nav\"><img src={logo_w_text} alt=\"FoodFind\" height=\"80\" /></Link>\n            </div>\n            <nav className=\"navBar\">\n                <ul>\n                    <li><Link to=\"/nav\">FIND</Link></li>\n                    <li><Link to=\"/saved\">SAVED</Link></li>\n                    <li><a href=\"/login\">LOGOUT</a></li>\n                </ul>\n            </nav>\n            <div className=\"bodyContainer\">\n                <Switch>\n                    <Route exact path=\"/nav\" render={props => // Render the \"Find\" page with the following props\n                        location.state !== undefined ? // If the state information is defined (if the user has just logged in)\n                            <Find {...props} username={location.state.username} setSavedArray={array => location.state.savedArray = array} /> : // Render the \"Find\" page, passing the user info\n                            <NotFound />} // If the user tries to access the page without logging in, they will get a 404\n                    />\n                    <Route exact path=\"/saved\" render={props => // Render the \"Saved\" page with the following props\n                        location.state !== undefined ? // If the state information is defined (if the user has just logged in)\n                            <Saved {...props} username={location.state.username} savedArray={location.state.savedArray} /> : // Render the \"Find\" page, passing the user info\n                            <NotFound />} // If the user tries to access the page without logging in, they will get a 404\n                    />\n                </Switch>\n            </div>\n        </BrowserRouter>\n    );\n}","import { Route, Switch } from 'react-router-dom';\nimport Register from './register&login/JSX/Register.js';\nimport Login from './register&login/JSX/Login.js';\nimport Nav from './main/JSX/Nav.js';\nimport NotFound from './NotFound.js';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <div className=\"parent\">\n        <div className=\"bodyContainer\">\n          <Switch>\n            <Route exact path=\"/\" component={Register} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/nav\" component={Nav} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter> <App/> </BrowserRouter>, document.getElementById('root'));\n/* ALLOWS FOR THE REACT APP TO BE RUN WRAPPED IN A BROWSERROUTER COMPONENT, THIS MEANS\nTHAT THE APP CAN UTILIZE ROUTE AND LINK COMPONENTS (ALLOWS TO SWITCH BETWEEN PAGES) */"],"sourceRoot":""}